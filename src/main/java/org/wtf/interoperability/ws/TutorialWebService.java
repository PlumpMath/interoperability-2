
package org.wtf.interoperability.ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Holder;

import org.wtf.interoperability.ws.vo.MessageAcknowledgment;
import org.wtf.interoperability.ws.vo.MessageSource;
import org.wtf.interoperability.ws.vo.ObjectFactory;
import org.wtf.interoperability.ws.vo.RequiredHeaderMissingFault;
import org.wtf.interoperability.ws.vo.SystemUnavailableFault;
import org.wtf.interoperability.ws.vo.TutorialRequest;
import org.wtf.interoperability.ws.vo.TutorialResponse;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 * 
 */
@WebService(name = "TutorialWebService", targetNamespace = "http://example.com/tutotial/")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface TutorialWebService {


    /**
     * 
     * 				Sends a message and gets back some stuff.
     * 			
     * 
     * @param response
     * @param source
     * @param acknowledgment
     * @param parameters
     * @throws SystemUnavailableFault
     * @throws RequiredHeaderMissingFault
     */
    @WebMethod(action = "http://example.com/tutotial/sendTutorialMessage")
    public void sendTutorialMessage(
        @WebParam(name = "tutorial-request", targetNamespace = "http://example.com/tutotial/", partName = "parameters")
        TutorialRequest parameters,
        @WebParam(name = "message-source", targetNamespace = "http://example.com/tutotial/", header = true, partName = "source")
        MessageSource source,
        @WebParam(name = "tutorial-response", targetNamespace = "http://example.com/tutotial/", mode = WebParam.Mode.OUT, partName = "response")
        Holder<TutorialResponse> response,
        @WebParam(name = "message-acknowledgment", targetNamespace = "http://example.com/tutotial/", header = true, mode = WebParam.Mode.OUT, partName = "acknowledgment")
        Holder<MessageAcknowledgment> acknowledgment)
        throws RequiredHeaderMissingFault, SystemUnavailableFault
    ;

}
